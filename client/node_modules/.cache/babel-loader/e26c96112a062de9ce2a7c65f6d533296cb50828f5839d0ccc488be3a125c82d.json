{"ast":null,"code":"// App.js\nimport React,{useState,useEffect}from\"react\";import Navbar from\"./Navbar\";import TodoForm from\"./TodoForm\";import TodoTable from\"./TodoTable\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[tasks,setTasks]=useState([]);// All tasks\nconst[editTask,setEditTask]=useState(null);// Task currently being edited\n// Use the environment variable; fallback to localhost if not defined\nconst API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5001\";// 1. Fetch tasks from backend\nconst fetchTasks=async()=>{try{const response=await fetch(\"${API_URL}/api/tasks\");const data=await response.json();setTasks(data);}catch(error){console.error(\"Error fetching tasks:\",error);}};useEffect(()=>{fetchTasks();},[]);// 2. Handle form submission (add or update)\nconst handleFormSubmit=async formData=>{if(editTask){// Update task: Send PUT request\ntry{const response=await fetch(`${API_URL}/api/tasks/${editTask.task_id}`,{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(formData)});await response.json();setEditTask(null);// clear edit mode\nfetchTasks();// refresh task list\n}catch(err){console.error(\"Error updating task:\",err);}}else{// Add new task: Send POST request\ntry{const response=await fetch(\"${API_URL}/api/tasks\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(formData)});await response.json();fetchTasks();// refresh task list\n}catch(err){console.error(\"Error adding task:\",err);}}};// 3. When user clicks Update on a row, set that task as the edit task\nconst handleEditClick=task=>{setEditTask(task);};// 4. Clear edit mode (e.g., when clicking clear form)\nconst clearEdit=()=>{setEditTask(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"font-serif\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(TodoForm,{onFormSubmit:handleFormSubmit,editTask:editTask,clearEdit:clearEdit}),/*#__PURE__*/_jsx(TodoTable,{tasks:tasks,onEditClick:handleEditClick,fetchTasks:fetchTasks})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Navbar","TodoForm","TodoTable","jsx","_jsx","jsxs","_jsxs","App","tasks","setTasks","editTask","setEditTask","API_URL","process","env","REACT_APP_API_URL","fetchTasks","response","fetch","data","json","error","console","handleFormSubmit","formData","task_id","method","headers","body","JSON","stringify","err","handleEditClick","task","clearEdit","className","children","onFormSubmit","onEditClick"],"sources":["/Users/nikhil/Desktop/Docs/UAlbany/DBS/POTDs/POTD_5/todo-app/client/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport TodoForm from \"./TodoForm\";\nimport TodoTable from \"./TodoTable\";\n\n\n\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);       // All tasks\n  const [editTask, setEditTask] = useState(null); // Task currently being edited\n\n  // Use the environment variable; fallback to localhost if not defined\n  const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001\";\n\n  // 1. Fetch tasks from backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch(\"${API_URL}/api/tasks\");\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // 2. Handle form submission (add or update)\n  const handleFormSubmit = async (formData) => {\n    if (editTask) {\n      // Update task: Send PUT request\n      try {\n        const response = await fetch(\n          `${API_URL}/api/tasks/${editTask.task_id}`,\n          {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formData),\n          }\n        );\n        await response.json();\n        setEditTask(null); // clear edit mode\n        fetchTasks();      // refresh task list\n      } catch (err) {\n        console.error(\"Error updating task:\", err);\n      }\n    } else {\n      // Add new task: Send POST request\n      try {\n        const response = await fetch(\"${API_URL}/api/tasks\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(formData),\n        });\n        await response.json();\n        fetchTasks(); // refresh task list\n      } catch (err) {\n        console.error(\"Error adding task:\", err);\n      }\n    }\n  };\n\n  // 3. When user clicks Update on a row, set that task as the edit task\n  const handleEditClick = (task) => {\n    setEditTask(task);\n  };\n\n  // 4. Clear edit mode (e.g., when clicking clear form)\n  const clearEdit = () => {\n    setEditTask(null);\n  };\n\n  return (\n    <div className=\"font-serif\">\n      <Navbar />\n      {/* Pass down the current editTask, form submit handler, and clearEdit */}\n      <TodoForm\n        onFormSubmit={handleFormSubmit}\n        editTask={editTask}\n        clearEdit={clearEdit}\n      />\n      {/* Pass down tasks and the edit click handler */}\n      <TodoTable tasks={tasks} onEditClick={handleEditClick} fetchTasks={fetchTasks} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}